# Written by Arctis#5228 on Discord.

# Imports
import discord
import random
import os
import time
import requests
import json
import owo
from log import log
from config import MOVIE_API_KEY
from config import DAD_API_KEY
from config import TOKEN
from config import APRS_API_KEY
from datetime import datetime
from fifteenapi import FifteenAPI

# intents stuff
intents = discord.Intents.default()
intents.members = True
intents.guild_messages = True
intents.guilds = True

# debug guild and more intents stuff
bot = discord.Bot(
    debug_guilds=[-], # debug server here
    intents=intents
)

# changes activity and prints that the bot is ready
@bot.event
async def on_ready():
    act = discord.Activity(type=discord.ActivityType.playing, name = "Hello, World!" )
    await bot.change_presence(activity=act)
    log(f"Logged in as {bot.user}")

@bot.slash_command(description = "Help command")
async def help(ctx):
    embed=discord.Embed(title=" ", description="A list of commands for the bot.", color=0x000000)
    embed.set_author(name="Commands")
    embed.add_field(name="/help", value="This command.", inline=False)
    embed.add_field(name="/furry", value="Sends a random image of a furry.", inline=False)
    embed.add_field(name="/aivoice", value="Sends an audio file of a character you chose reciting the text you sent. For more information, go to https://15.ai/", inline=False)
    embed.add_field(name="/joke", value="Sends a random. Type in /joke list to get a list of jokes.", inline=False)
    embed.add_field(name="/animal", value="Sends a random animal. Type in /joke list to get a list of jokes.", inline=False)
    embed.add_field(name="/owoify", value="Infects your text with the pathOWOgen.", inline=False)
    embed.add_field(name="/movie", value="Searches the IMDB database and gives you information about a movie.", inline=False)
    embed.add_field(name="/lyrics", value="Gives you the lyrics for a song.", inline=False)
    embed.add_field(name="/aprs", value="Displays information about an APRS callsign.", inline=False)
    embed.add_field(name="/rf", value="hows conditions of multiple HAM Radio bands.", inline=False)

    embed.set_footer(text="botty - Arctis#5228")
    await ctx.respond(embed=embed)
    
@bot.slash_command(description = "Sends an audio file of a character you chose reciting the text you sent.")
async def aivoice(ctx, character, message):
    await ctx.defer()

    filerand = random.randint(0, 10000)

    tts_api = FifteenAPI(show_debug=True)
    response = tts_api.save_to_file(f"{character}", f"{message}", f"{character}_{message}_{filerand}.wav")

    assert response["status"] == "OK"
    assert response["filename"] == f"{character}_{message}_{filerand}.wav"
   
    await ctx.respond(file=discord.File(f'{character}_{message}_{filerand}.wav'))
    await ctx.send(f"Generated by 15.ai. Character used: {character}")

    os.remove(f"{character}_{message}_{filerand}.wav")

@bot.slash_command(description = "Tells a joke. Execute /joke help to get a list of joke categories.")
async def joke(ctx, category):
    if category == "help":
        await ctx.respond("Joke types available: Dad joke (dad)\nProgrammer joke (dev)\nPunny joke (pun)\nMiscellaneous jokes (misc)")
    elif category == "dad":
        url = "https://dad-jokes.p.rapidapi.com/random/joke/"

        headers = {
        'x-rapidapi-host': "dad-jokes.p.rapidapi.com",
        'x-rapidapi-key': f"{DAD_API_KEY}"
        }

        response = requests.request("GET", url, headers=headers)
        data = json.loads(response.text)

        await ctx.respond(f"{data['body'][0]['setup']}\n{data['body'][0]['punchline']}")

    elif category == "dev":

        url = "https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,political,racist,sexist,explicit"

        response = requests.request("GET", url)
        data = json.loads(response.text)
        joketype = data['type']

        if joketype == "twopart":
            joke = f"{data['setup']}\n{data['delivery']}"
            await ctx.respond(joke)
        else:
            joke = f"{data['joke']}"
            await ctx.respond(joke)

    elif category == "pun":
        url = "https://v2.jokeapi.dev/joke/Pun?blacklistFlags=nsfw,religious,political,racist,sexist,explicit"

        response = requests.request("GET", url)
        data = json.loads(response.text)
        joketype = data['type']
        
        if joketype == "twopart":
            joke = f"{data['setup']}\n{data['delivery']}"
            await ctx.respond(joke)
        else:
            joke = f"{data['joke']}"
            await ctx.respond(joke)

    elif category == "misc":
        url = "https://v2.jokeapi.dev/joke/Miscellaneous?blacklistFlags=nsfw,religious,political,racist,sexist,explicit"

        response = requests.request("GET", url)
        data = json.loads(response.text)
        joketype = data['type']
        
        if joketype == "twopart":
            joke = f"{data['setup']}\n{data['delivery']}"
            await ctx.respond(joke)
        else:
            joke = f"{data['joke']}"
            await ctx.respond(joke)
    else:
        await ctx.respond("That's not a valid category.")

@bot.slash_command(description = "Sends an image of an animal.")
async def animal(ctx, animal):
    if animal == "cat":

        caturl = "http://aws.random.cat/meow"

        catresponse = requests.request("GET", caturl)
        catdata = json.loads(catresponse.text)

        embed = discord.Embed(title = "Cat", description = f"Random cat", color = 0x000000)
        embed.set_image(url = f"{catdata['file']}")
        embed.set_footer(text="botty - Arctis#5228")
        await ctx.respond(embed=embed)

    elif animal == "dog":

        dogurl = "https://dog.ceo/api/breeds/image/random"

        dogresponse = requests.request("GET", dogurl)
        dogdata = json.loads(dogresponse.text)

        embed = discord.Embed(title = "Dog", description = f"Random dog", color = 0x000000)
        embed.set_image(url = f"{dogdata['message']}")
        embed.set_footer(text="botty - Arctis#8888")
        await ctx.respond(embed=embed)

    elif animal == "fox":
        foxurl = "https://randomfox.ca/floof/"

        foxresponse = requests.request("GET", foxurl)
        foxdata = json.loads(foxresponse.text)

        embed = discord.Embed(title = "Fox", description = f"Random fox", color = 0x000000)
        embed.set_image(url = f"{foxdata['image']}")
        embed.set_footer(text="botty - Arctis#8888")
        await ctx.respond(embed=embed)

    elif animal == "help":

        await ctx.respond("Available animals:\nDog (dog)\nCat (cat)\nFox (fox)")

    else:

        await ctx.respond("That's not a valid choice.")

@bot.slash_command(description = "Infects your message with the PathOWOgen.")
async def owoify(ctx, text):
    await ctx.respond(owo.substitute(f"{text}"))

@bot.slash_command(description = "Searches the IMDB database and gives you information about a movie.")
async def movie(ctx, movie):
    url = f"https://www.omdbapi.com/?t={movie}&apikey={MOVIE_API_KEY}&plot=full"

    response = requests.request("GET", url)
    data = json.loads(response.text)

    if data['Response'] == "True":
        embed=discord.Embed(title=f"{data['Title']}", description=f"{data['Plot']}")
        embed.add_field(name="Released", value=f"{data['Released']}", inline=True)
        embed.add_field(name="Rated", value=f"{data['Rated']}", inline=True)
        embed.add_field(name="Genre", value=f"{data['Genre']}", inline=True)
        embed.add_field(name="Director", value=f"{data['Director']}", inline=True)
        embed.add_field(name="Writer(s)", value=f"{data['Writer']}", inline=True)
        embed.add_field(name="Actors", value=f"{data['Actors']}", inline=True)
        embed.add_field(name="Language", value=f"{data['Language']}", inline=True)
        embed.add_field(name="Country", value=f"{data['Country']}", inline=True)
        embed.add_field(name="imdbID", value=f"{data['imdbID']}", inline=True)
        embed.set_footer(text="botty - Arctis#5228")
        await ctx.respond(embed=embed)
    else:

     embed=discord.Embed(title=f"Whoops!", description=f"The movie name you entered is invalid.")
     await ctx.respond(embed=embed)

@bot.slash_command(description = "Gives you the lyrics for a song.")
async def lyrics(ctx, artist, song):
    url = f"https://api.lyrics.ovh/v1/{artist}/{song}"

    response = requests.request("GET", url)
    data = json.loads(response.text)

    if data['error'] == "No lyrics found":
        embed=discord.Embed(title="Whoops!", description="Your request is invalid. Try checking your spelling and capitalization.")
        embed.set_footer(text="botty - Arctis#5228")

        await ctx.respond(embed=embed)

    else:

        embed=discord.Embed(title=f"{artist} - {song}", description=f"{data['lyrics']}")
        embed.set_footer(text="botty - Arctis#5228")

        await ctx.respond(embed=embed)

@bot.slash_command(description = "Sends a random furry.")
async def furry(ctx):
    img = random.randint(1, 300)
    await ctx.respond(f"http://arctisweb.root.sx/uwu/({img}).jpg") ## The images are available for free (http://arctisweb.root.sx/uwu)

@bot.slash_command(description = "Displays information about an APRS callsign.")
async def aprs(ctx, callsign):
    url = f"https://api.aprs.fi/api/get?name={callsign}&what=loc&apikey={APRS_API_KEY}&format=json"

    response = requests.request("GET", url)
    data = json.loads(response.text)

    if data['found'] == 0:
        embed=discord.Embed(title="Whoops!", description="It seems like you have made an invalid request or the callsign that you requested has not been found.", color=0x000000)
        embed.set_footer(text="botty - Arctis#5228")
        await ctx.respond(embed=embed)
    else:
        aprsdata = data['entries'][0]
        
        embed=discord.Embed(title="APRS")
        embed.add_field(name="Callsign", value=f"{aprsdata['name']}", inline=True)
        embed.add_field(name="Last transmitted", value=f"{datetime.fromtimestamp(int(aprsdata['lasttime']))}", inline=True)
        embed.add_field(name="Latest message path", value=f"{aprsdata['path']}", inline=True)
        embed.add_field(name="Latitude", value=f"{aprsdata['lat']}", inline=True)
        embed.add_field(name="Longtitude", value=f"{aprsdata['lng']}", inline=True)
        embed.add_field(name="Type", value=f"{aprsdata['type']}", inline=True)
        await ctx.respond(embed=embed)
        
@bot.slash_command(description = "Shows conditions of multiple HAM Radio bands.")
async def rf(ctx):
    await ctx.respond("https://hamqsl.com/solar101pic.php")

bot.run(TOKEN)

